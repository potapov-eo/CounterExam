{"version":3,"sources":["ButtonComponent.tsx","Display.tsx","Counter.tsx","Input.tsx","SetValueForCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ButtonComponent","props","classButton","dis","className","disabled","onClick","changeCount","title","Display","error","count","maxCount","Counter","useState","minCount","setCount","disInt","activeCounter","disReset","errorSetCount","id","Input","classInput","errorInput","onChange","e","changTimeMinValue","currentTarget","value","type","SetValueForCounter","timeMinValue","setTimeMinValue","timeMaxValue","setTimeMaxValue","disSet","setDisSet","setErrorInput","newCount","changActiveCounter","changErrorSetCount","changeCountInitState","App","setMaxCount","setMinCount","setActiveCounter","disButtons","setErrorSetCount","timeMaxCount","timeMinCount","x","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4d20b50f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonComponentType = {\r\n    id: number\r\n    count?: number\r\n    title: string\r\n    changeCount: () => void\r\n    dis: boolean\r\n\r\n}\r\n\r\nexport function ButtonComponent(props: ButtonComponentType) {\r\n\r\n    let classButton = props.dis ? \"buttonDisabled\" : \"button\"\r\n\r\n    return <button className={classButton} disabled={props.dis} onClick={props.changeCount}>{props.title}</button>\r\n}\r\n","import React from 'react';\r\n\r\ntype DisplayType = {\r\n    count: number\r\n    maxCount: number\r\n\r\n}\r\n\r\nexport function Display(props: DisplayType) {\r\n    const error = props.count === props.maxCount ? \"error\" : \"display\"\r\n\r\n    return <div className={error}>{props.count}</div>\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {ButtonComponent} from \"./ButtonComponent\";\nimport {Display} from \"./Display\";\n\ntype CounterPropsType = {\n    minCount: number\n    maxCount: number\n    disButtons: boolean\n    activeCounter: boolean\n    errorSetCount: boolean\n\n\n}\n\nfunction Counter(props: CounterPropsType) {\n    let [count, setCount] = useState<number>(props.minCount)\n    let disInt = (count === props.maxCount)  || !props.activeCounter\n    let disReset = (count === props.minCount) || !props.activeCounter\n    let changeCount = () => {\n        if (count < props.maxCount) {\n            setCount(count + 1)\n        }\n\n    }\n    if (count < props.minCount) {\n        setCount(props.minCount)\n    }\n    let resetCount = () => setCount(props.minCount)\n    return (\n        <div>\n            <div className=\"App\">\n\n                <div className=\"Counter\">\n                    <div className=\"Display\">\n                        {props.errorSetCount ?\n                            <div className=\"error\">Incorrect value</div>\n                            : props.activeCounter ? <Display\n                                    count={count} maxCount={props.maxCount}/>\n                                : <div className=\"display2\">Enter values and pres SET</div>}\n                    </div>\n                    <div className=\"displayButton\">\n                        <ButtonComponent\n                            dis={disInt}\n                            id={1}\n                            count={count}\n                            title={\"INT\"}\n                            changeCount={changeCount}\n\n                        />\n                        <ButtonComponent\n                            id={2}\n                            count={count}\n                            title={\"RESET\"}\n                            changeCount={resetCount}\n                            dis={disReset}\n\n                        />\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {ChangeEvent, useState} from 'react';\n\ntype InputPropsType = {\n    changTimeMinValue: (newMinCount: number) => void\n    errorInput: boolean\n    value: number\n}\n\nexport function Input(props: InputPropsType) {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changTimeMinValue(+e.currentTarget.value)\n    }\n    let classInput = props.errorInput ? \"input\" : \"input-error\"\n    return (\n        <input onChange={onChangeHandler} type={\"number\"} className={classInput} value={props.value}/>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {ButtonComponent} from \"./ButtonComponent\";\nimport {Input} from \"./Input\";\n\ntype SetValueForCounterPropsType = {\n    minCount: number\n    maxCount: number\n    changeCountInitState: (timeMaxCount: number, timeMinCount: number) => void\n    changActiveCounter: (x: boolean) => void\n    changErrorSetCount: (x: boolean) => void\n}\n\nfunction SetValueForCounter(props: SetValueForCounterPropsType) {\n    const [timeMinValue, setTimeMinValue] = useState<number>(props.minCount)\n    const [timeMaxValue, setTimeMaxValue] = useState<number>(props.maxCount)\n    const [disSet, setDisSet] = useState<boolean>(true)\n    const [errorInput, setErrorInput] = useState<boolean>(true)\n    let changTimeMinValue = (newCount: number) => {\n        props.changActiveCounter(false)\n        if ((newCount < 0) || (newCount >= timeMaxValue)) {\n            props.changErrorSetCount(true)\n            setDisSet(false)\n            setErrorInput(false)\n        } else {\n            props.changErrorSetCount(false)\n            setDisSet(true)\n            setErrorInput(true)\n        }\n        setTimeMinValue(newCount)\n    }\n    let changTimeMaxValue = (newCount: number) => {\n        props.changActiveCounter(false)\n        setTimeMaxValue(newCount)\n        if (newCount <= timeMinValue) {\n            props.changErrorSetCount(true)\n            setDisSet(false)\n            setErrorInput(false)\n        } else {\n            props.changErrorSetCount(false)\n            setDisSet(true)\n            setErrorInput(true)\n        }\n    }\n    const changeCountInit = () => {\n        props.changeCountInitState(timeMaxValue, timeMinValue)\n        setDisSet(false)\n    }\n    return (\n        <div className=\"App\">\n            <div className=\"Counter\">\n                <div className=\"display2\">\n                    <div className=\"input-field\">\n                        <span>min value</span>\n                        <span>\n                                <Input errorInput={errorInput}\n                                       changTimeMinValue={changTimeMinValue}\n                                       value={timeMinValue}/>\n                            </span>\n                    </div>\n                    <div>\n                        <span>max value</span>\n                        <span>\n                                <Input errorInput={errorInput}\n                                       changTimeMinValue={changTimeMaxValue}\n                                       value={timeMaxValue}/>\n                            </span>\n                    </div>\n\n                </div>\n                <div className=\"displayButton\">\n                    <ButtonComponent\n                        dis={!disSet}\n                        id={3}\n                        title={\"SET\"}\n                        changeCount={changeCountInit}\n\n                    />\n\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default SetValueForCounter;\n","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport Counter from \"./Counter\";\r\nimport SetValueForCounter from \"./SetValueForCounter\";\r\n\r\nfunction App() {\r\n\r\n    const [maxCount, setMaxCount] = useState<number>(10)\r\n    const [minCount, setMinCount] = useState<number>(5)\r\n\r\n    const [activeCounter, setActiveCounter] = useState<boolean>(true)\r\n    const [disButtons, setDisButtons] = useState<boolean>(false)\r\n    const [errorSetCount, setErrorSetCount] = useState<boolean>(false)\r\n\r\n\r\n    let changeCountInitState = (timeMaxCount: number, timeMinCount: number) => {\r\n        setMaxCount(timeMaxCount)\r\n        setMinCount(timeMinCount)\r\n        setActiveCounter(true)\r\n    }\r\n    let changActiveCounter = (x: boolean) => {\r\n        setActiveCounter(x)\r\n    }\r\n    let changErrorSetCount = (x: boolean) => {\r\n        setErrorSetCount(x)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                current minValue = {minCount}\r\n            </div>\r\n            <div>\r\n                current maxValue = {maxCount}\r\n            </div>\r\n            <Counter minCount={minCount}\r\n                     maxCount={maxCount}\r\n                     disButtons={disButtons}\r\n                     activeCounter={activeCounter}\r\n                     errorSetCount={errorSetCount}/>\r\n\r\n            <SetValueForCounter minCount={minCount}\r\n                                maxCount={maxCount}\r\n                                changeCountInitState={changeCountInitState}\r\n                                changActiveCounter={changActiveCounter}\r\n\r\n                                changErrorSetCount={changErrorSetCount}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}